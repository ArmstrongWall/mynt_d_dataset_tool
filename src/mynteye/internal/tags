!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BUFFER_SIZE	hid_macosx.c	40;"	d	language:C	file:
CP1	camera_p_win.cc	86;"	d	language:C++	file:
CP2	camera_p_win.cc	87;"	d	language:C++	file:
CameraPrivate	camera_p.cc	/^CameraPrivate::CameraPrivate()$/;"	f	language:C++	class:CameraPrivate	signature:()
CameraPrivate	camera_p.h	/^class CameraPrivate {$/;"	c	language:C++
CameraPrivate::CameraPrivate	camera_p.cc	/^CameraPrivate::CameraPrivate()$/;"	f	language:C++	class:CameraPrivate	signature:()
CameraPrivate::CaptureImage	camera_p.cc	/^void CameraPrivate::CaptureImage(const ImageType& type, $/;"	f	language:C++	class:CameraPrivate	signature:(const ImageType& type, ErrorCode* code)
CameraPrivate::CaptureImage	camera_p.h	/^  void CaptureImage(const ImageType &type, ErrorCode *code);$/;"	p	language:C++	class:CameraPrivate	access:private	signature:(const ImageType &type, ErrorCode *code)
CameraPrivate::CheckOpened	camera_p.cc	/^void CameraPrivate::CheckOpened() const {$/;"	f	language:C++	class:CameraPrivate	signature:() const
CameraPrivate::CheckOpened	camera_p.h	/^  void CheckOpened() const;$/;"	p	language:C++	class:CameraPrivate	access:public	signature:() const
CameraPrivate::Close	camera_p.cc	/^void CameraPrivate::Close() {$/;"	f	language:C++	class:CameraPrivate	signature:()
CameraPrivate::Close	camera_p.h	/^  void Close();$/;"	p	language:C++	class:CameraPrivate	access:public	signature:()
CameraPrivate::GetDevices	camera_p.cc	/^void CameraPrivate::GetDevices(std::vector<DeviceInfo>* dev_infos) {$/;"	f	language:C++	class:CameraPrivate	signature:(std::vector<DeviceInfo>* dev_infos)
CameraPrivate::GetDevices	camera_p.h	/^  void GetDevices(std::vector<DeviceInfo>* dev_infos);$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(std::vector<DeviceInfo>* dev_infos)
CameraPrivate::GetFWRegister	camera_p.cc	/^bool CameraPrivate::GetFWRegister(std::uint16_t address, std::uint16_t* value,$/;"	f	language:C++	class:CameraPrivate	signature:(std::uint16_t address, std::uint16_t* value, int flag)
CameraPrivate::GetFWRegister	camera_p.h	/^  bool GetFWRegister(std::uint16_t address, std::uint16_t* value,$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(std::uint16_t address, std::uint16_t* value, int flag = FG_Address_1Byte)
CameraPrivate::GetHWRegister	camera_p.cc	/^bool CameraPrivate::GetHWRegister(std::uint16_t address, std::uint16_t* value,$/;"	f	language:C++	class:CameraPrivate	signature:(std::uint16_t address, std::uint16_t* value, int flag)
CameraPrivate::GetHWRegister	camera_p.h	/^  bool GetHWRegister(std::uint16_t address, std::uint16_t* value,$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(std::uint16_t address, std::uint16_t* value, int flag = FG_Address_1Byte)
CameraPrivate::GetImuData	camera_p.cc	/^std::vector<device::MotionData> CameraPrivate::GetImuData() {$/;"	f	language:C++	class:CameraPrivate	signature:()
CameraPrivate::GetImuData	camera_p.h	/^  motion_datas_t GetImuData();$/;"	p	language:C++	class:CameraPrivate	access:public	signature:()
CameraPrivate::GetResolutionIndex	camera_p.cc	/^void CameraPrivate::GetResolutionIndex(const InitParams& params,$/;"	f	language:C++	class:CameraPrivate	signature:(const InitParams& params, int* color_res_index, int* depth_res_index)
CameraPrivate::GetResolutionIndex	camera_p.cc	/^void CameraPrivate::GetResolutionIndex(const std::int32_t& dev_index,$/;"	f	language:C++	class:CameraPrivate	signature:(const std::int32_t& dev_index, const StreamMode& stream_mode, const StreamFormat& color_stream_format, const StreamFormat& depth_stream_format, int *color_res_index, int *depth_res_index)
CameraPrivate::GetResolutionIndex	camera_p.h	/^  void GetResolutionIndex(const InitParams& params,$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(const InitParams& params, int* color_res_index, int* depth_res_index)
CameraPrivate::GetResolutionIndex	camera_p.h	/^  void GetResolutionIndex(const std::int32_t& dev_index,$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(const std::int32_t& dev_index, const StreamMode& stream_mode, const StreamFormat& color_stream_format, const StreamFormat& depth_stream_format, int* color_res_index, int* depth_res_index)
CameraPrivate::GetResolutions	camera_p.cc	/^void CameraPrivate::GetResolutions(const std::int32_t& dev_index,$/;"	f	language:C++	class:CameraPrivate	signature:(const std::int32_t& dev_index, std::vector<StreamInfo>* color_infos, std::vector<StreamInfo>* depth_infos)
CameraPrivate::GetResolutions	camera_p.h	/^  void GetResolutions(const std::int32_t& dev_index,$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(const std::int32_t& dev_index, std::vector<StreamInfo>* color_infos, std::vector<StreamInfo>* depth_infos)
CameraPrivate::GetSensorRegister	camera_p.cc	/^bool CameraPrivate::GetSensorRegister(int id, std::uint16_t address,$/;"	f	language:C++	class:CameraPrivate	signature:(int id, std::uint16_t address, std::uint16_t* value, int flag)
CameraPrivate::GetSensorRegister	camera_p.h	/^  bool GetSensorRegister(int id, std::uint16_t address, std::uint16_t* value,$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(int id, std::uint16_t address, std::uint16_t* value, int flag = FG_Address_1Byte)
CameraPrivate::ImageInfoCallback	camera_p.cc	/^void CameraPrivate::ImageInfoCallback(const ImgInfoPacket &packet) {$/;"	f	language:C++	class:CameraPrivate	signature:(const ImgInfoPacket &packet)
CameraPrivate::ImageInfoCallback	camera_p.h	/^  void ImageInfoCallback(const ImgInfoPacket &packet);$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(const ImgInfoPacket &packet)
CameraPrivate::ImgCallback	camera_p.h	/^  static void ImgCallback(EtronDIImageType::Value imgType, int imgId,$/;"	p	language:C++	class:CameraPrivate	access:private	signature:(EtronDIImageType::Value imgType, int imgId, unsigned char* imgBuf, int imgSize, int width, int height, int serialNumber, void *pParam)
CameraPrivate::ImgCallback	camera_p_win.cc	/^void CameraPrivate::ImgCallback(EtronDIImageType::Value imgType, int imgId,$/;"	f	language:C++	class:CameraPrivate	signature:(EtronDIImageType::Value imgType, int imgId, unsigned char* imgBuf, int imgSize, int width, int height, int serialNumber, void *pParam)
CameraPrivate::ImuDataCallback	camera_p.cc	/^void CameraPrivate::ImuDataCallback(const ImuPacket &packet) {$/;"	f	language:C++	class:CameraPrivate	signature:(const ImuPacket &packet)
CameraPrivate::ImuDataCallback	camera_p.h	/^  void ImuDataCallback(const ImuPacket &packet);$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(const ImuPacket &packet)
CameraPrivate::IsOpened	camera_p.cc	/^bool CameraPrivate::IsOpened() const {$/;"	f	language:C++	class:CameraPrivate	signature:() const
CameraPrivate::IsOpened	camera_p.h	/^  bool IsOpened() const;$/;"	p	language:C++	class:CameraPrivate	access:public	signature:() const
CameraPrivate::OnInit	camera_p.h	/^  void OnInit();$/;"	p	language:C++	class:CameraPrivate	access:private	signature:()
CameraPrivate::OnInit	camera_p_linux.cc	/^void CameraPrivate::OnInit() {$/;"	f	language:C++	class:CameraPrivate	signature:()
CameraPrivate::OnInit	camera_p_win.cc	/^void CameraPrivate::OnInit() {$/;"	f	language:C++	class:CameraPrivate	signature:()
CameraPrivate::OnPostWait	camera_p.h	/^  void OnPostWait();$/;"	p	language:C++	class:CameraPrivate	access:private	signature:()
CameraPrivate::OnPostWait	camera_p_linux.cc	/^void CameraPrivate::OnPostWait() {$/;"	f	language:C++	class:CameraPrivate	signature:()
CameraPrivate::OnPostWait	camera_p_win.cc	/^void CameraPrivate::OnPostWait() {$/;"	f	language:C++	class:CameraPrivate	signature:()
CameraPrivate::OnPreWait	camera_p.h	/^  void OnPreWait();$/;"	p	language:C++	class:CameraPrivate	access:private	signature:()
CameraPrivate::OnPreWait	camera_p_linux.cc	/^void CameraPrivate::OnPreWait() {$/;"	f	language:C++	class:CameraPrivate	signature:()
CameraPrivate::OnPreWait	camera_p_win.cc	/^void CameraPrivate::OnPreWait() {$/;"	f	language:C++	class:CameraPrivate	signature:()
CameraPrivate::Open	camera_p.cc	/^ErrorCode CameraPrivate::Open(const InitParams& params) {$/;"	f	language:C++	class:CameraPrivate	signature:(const InitParams& params)
CameraPrivate::Open	camera_p.h	/^  ErrorCode Open(const InitParams& params);$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(const InitParams& params)
CameraPrivate::ReleaseBuf	camera_p.cc	/^void CameraPrivate::ReleaseBuf() {$/;"	f	language:C++	class:CameraPrivate	signature:()
CameraPrivate::ReleaseBuf	camera_p.h	/^  void ReleaseBuf();$/;"	p	language:C++	class:CameraPrivate	access:private	signature:()
CameraPrivate::RetrieveImage	camera_p.cc	/^std::vector<device::StreamData> CameraPrivate::RetrieveImage(const ImageType& type,$/;"	f	language:C++	class:CameraPrivate	signature:(const ImageType& type, ErrorCode* code)
CameraPrivate::RetrieveImage	camera_p.h	/^  stream_datas_t RetrieveImage(const ImageType& type, ErrorCode* code);$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(const ImageType& type, ErrorCode* code)
CameraPrivate::RetrieveImageColor	camera_p.h	/^  Image::pointer RetrieveImageColor(ErrorCode* code);$/;"	p	language:C++	class:CameraPrivate	access:private	signature:(ErrorCode* code)
CameraPrivate::RetrieveImageColor	camera_p_linux.cc	/^Image::pointer CameraPrivate::RetrieveImageColor(ErrorCode* code) {$/;"	f	language:C++	class:CameraPrivate	signature:(ErrorCode* code)
CameraPrivate::RetrieveImageColor	camera_p_win.cc	/^Image::pointer CameraPrivate::RetrieveImageColor(ErrorCode* code) {$/;"	f	language:C++	class:CameraPrivate	signature:(ErrorCode* code)
CameraPrivate::RetrieveImageDepth	camera_p.h	/^  Image::pointer RetrieveImageDepth(ErrorCode* code);$/;"	p	language:C++	class:CameraPrivate	access:private	signature:(ErrorCode* code)
CameraPrivate::RetrieveImageDepth	camera_p_linux.cc	/^Image::pointer CameraPrivate::RetrieveImageDepth(ErrorCode* code) {$/;"	f	language:C++	class:CameraPrivate	signature:(ErrorCode* code)
CameraPrivate::RetrieveImageDepth	camera_p_win.cc	/^Image::pointer CameraPrivate::RetrieveImageDepth(ErrorCode* code) {$/;"	f	language:C++	class:CameraPrivate	signature:(ErrorCode* code)
CameraPrivate::RetrieveLatestImage	camera_p.cc	/^CameraPrivate::stream_data_t CameraPrivate::RetrieveLatestImage(const ImageType& type,$/;"	f	language:C++	class:CameraPrivate	signature:(const ImageType& type, ErrorCode* code)
CameraPrivate::RetrieveLatestImage	camera_p.h	/^  stream_data_t RetrieveLatestImage(const ImageType& type, ErrorCode* code);$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(const ImageType& type, ErrorCode* code)
CameraPrivate::SetAutoExposureEnabled	camera_p.cc	/^ErrorCode CameraPrivate::SetAutoExposureEnabled(bool enabled) {$/;"	f	language:C++	class:CameraPrivate	signature:(bool enabled)
CameraPrivate::SetAutoExposureEnabled	camera_p.h	/^  ErrorCode SetAutoExposureEnabled(bool enabled);$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(bool enabled)
CameraPrivate::SetAutoWhiteBalanceEnabled	camera_p.cc	/^ErrorCode CameraPrivate::SetAutoWhiteBalanceEnabled(bool enabled) {$/;"	f	language:C++	class:CameraPrivate	signature:(bool enabled)
CameraPrivate::SetAutoWhiteBalanceEnabled	camera_p.h	/^  ErrorCode SetAutoWhiteBalanceEnabled(bool enabled);$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(bool enabled)
CameraPrivate::SetFWRegister	camera_p.cc	/^bool CameraPrivate::SetFWRegister(std::uint16_t address, std::uint16_t value,$/;"	f	language:C++	class:CameraPrivate	signature:(std::uint16_t address, std::uint16_t value, int flag)
CameraPrivate::SetFWRegister	camera_p.h	/^  bool SetFWRegister(std::uint16_t address, std::uint16_t value,$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(std::uint16_t address, std::uint16_t value, int flag = FG_Address_1Byte)
CameraPrivate::SetHWRegister	camera_p.cc	/^bool CameraPrivate::SetHWRegister(std::uint16_t address, std::uint16_t value,$/;"	f	language:C++	class:CameraPrivate	signature:(std::uint16_t address, std::uint16_t value, int flag)
CameraPrivate::SetHWRegister	camera_p.h	/^  bool SetHWRegister(std::uint16_t address, std::uint16_t value,$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(std::uint16_t address, std::uint16_t value, int flag = FG_Address_1Byte)
CameraPrivate::SetHidCallback	camera_p.h	/^  void SetHidCallback();$/;"	p	language:C++	class:CameraPrivate	access:public	signature:()
CameraPrivate::SetSensorRegister	camera_p.cc	/^bool CameraPrivate::SetSensorRegister(int id, std::uint16_t address,$/;"	f	language:C++	class:CameraPrivate	signature:(int id, std::uint16_t address, std::uint16_t value, int flag)
CameraPrivate::SetSensorRegister	camera_p.h	/^  bool SetSensorRegister(int id, std::uint16_t address, std::uint16_t value,$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(int id, std::uint16_t address, std::uint16_t value, int flag = FG_Address_1Byte)
CameraPrivate::StartCaptureImage	camera_p.cc	/^void CameraPrivate::StartCaptureImage() {$/;"	f	language:C++	class:CameraPrivate	signature:()
CameraPrivate::StartCaptureImage	camera_p.h	/^  void StartCaptureImage();$/;"	p	language:C++	class:CameraPrivate	access:public	signature:()
CameraPrivate::StartHidTracking	camera_p.cc	/^ErrorCode CameraPrivate::StartHidTracking() {$/;"	f	language:C++	class:CameraPrivate	signature:()
CameraPrivate::StartHidTracking	camera_p.h	/^  ErrorCode StartHidTracking();$/;"	p	language:C++	class:CameraPrivate	access:public	signature:()
CameraPrivate::StopCaptureImage	camera_p.cc	/^void CameraPrivate::StopCaptureImage() {$/;"	f	language:C++	class:CameraPrivate	signature:()
CameraPrivate::StopCaptureImage	camera_p.h	/^  void StopCaptureImage();$/;"	p	language:C++	class:CameraPrivate	access:public	signature:()
CameraPrivate::Synthetic	camera_p.cc	/^void CameraPrivate::Synthetic(const ImageType &type) {$/;"	f	language:C++	class:CameraPrivate	signature:(const ImageType &type)
CameraPrivate::Synthetic	camera_p.h	/^  void Synthetic(const ImageType &type);$/;"	p	language:C++	class:CameraPrivate	access:private	signature:(const ImageType &type)
CameraPrivate::Wait	camera_p.cc	/^void CameraPrivate::Wait() {$/;"	f	language:C++	class:CameraPrivate	signature:()
CameraPrivate::Wait	camera_p.h	/^  void Wait();$/;"	p	language:C++	class:CameraPrivate	access:public	signature:()
CameraPrivate::cap_color_mtx_	camera_p.h	/^  std::mutex cap_color_mtx_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::cap_depth_mtx_	camera_p.h	/^  std::mutex cap_depth_mtx_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::cap_image_thread_	camera_p.h	/^  std::thread cap_image_thread_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::channels_	camera_p.h	/^  std::shared_ptr<Channels> channels_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::color_data_	camera_p.h	/^  stream_datas_t color_data_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::color_image_buf_	camera_p.h	/^  Image::pointer color_image_buf_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::color_image_size_	camera_p.h	/^  image_size_t color_image_size_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::color_palette_z14_	camera_p.h	/^  RGBQUAD color_palette_z14_[16384];$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::color_res_index_	camera_p.h	/^  int color_res_index_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::color_serial_number_	camera_p.h	/^  int color_serial_number_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::counter	camera_p.cc	/^std::uint16_t CameraPrivate::counter = 1;$/;"	m	language:C++	class:CameraPrivate	file:
CameraPrivate::counter	camera_p.h	/^  static std::uint16_t counter;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::depth_buf_	camera_p.h	/^  unsigned char* depth_buf_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::depth_data_	camera_p.h	/^  stream_datas_t depth_data_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::depth_data_type_	camera_p.h	/^  int depth_data_type_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::depth_image_buf_	camera_p.h	/^  Image::pointer depth_image_buf_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::depth_image_size_	camera_p.h	/^  image_size_t depth_image_size_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::depth_mode_	camera_p.h	/^  DepthMode depth_mode_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::depth_res_index_	camera_p.h	/^  int depth_res_index_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::depth_serial_number_	camera_p.h	/^  int depth_serial_number_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::dev_sel_info_	camera_p.h	/^  DEVSELINFO dev_sel_info_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::dtc_	camera_p.h	/^  DEPTH_TRANSFER_CTRL dtc_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::etron_di_	camera_p.h	/^  void* etron_di_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::framerate_	camera_p.h	/^  int framerate_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::image_color_	camera_p.h	/^  std::vector<Image::pointer> image_color_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::image_color_wait_	camera_p.h	/^  std::condition_variable image_color_wait_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::image_depth_	camera_p.h	/^  std::vector<Image::pointer> image_depth_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::image_depth_wait_	camera_p.h	/^  std::condition_variable image_depth_wait_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::img_info_	camera_p.h	/^  img_info_datas_t img_info_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::imu_data_	camera_p.h	/^  motion_datas_t imu_data_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::is_capture_image_	camera_p.h	/^  bool is_capture_image_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::is_imu_open_	camera_p.h	/^  bool is_imu_open_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::is_start_	camera_p.h	/^  bool is_start_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::mtx_img_info_	camera_p.h	/^  std::mutex mtx_img_info_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::mtx_imgs_	camera_p.h	/^  std::mutex mtx_imgs_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::mtx_imu_	camera_p.h	/^  std::mutex mtx_imu_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::rate_	camera_p.h	/^  std::unique_ptr<Rate> rate_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::stream_color_info_ptr_	camera_p.h	/^  PETRONDI_STREAM_INFO stream_color_info_ptr_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::stream_depth_info_ptr_	camera_p.h	/^  PETRONDI_STREAM_INFO stream_depth_info_ptr_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::stream_info_dev_index_	camera_p.h	/^  std::int32_t stream_info_dev_index_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::sync_thread_	camera_p.h	/^  std::thread sync_thread_;$/;"	m	language:C++	class:CameraPrivate	access:private
CameraPrivate::~CameraPrivate	camera_p.cc	/^CameraPrivate::~CameraPrivate() {$/;"	f	language:C++	class:CameraPrivate	signature:()
CameraPrivate::~CameraPrivate	camera_p.h	/^  ~CameraPrivate();$/;"	p	language:C++	class:CameraPrivate	access:public	signature:()
CaptureImage	camera_p.cc	/^void CameraPrivate::CaptureImage(const ImageType& type, $/;"	f	language:C++	class:CameraPrivate	signature:(const ImageType& type, ErrorCode* code)
CaptureImage	camera_p.h	/^  void CaptureImage(const ImageType &type, ErrorCode *code);$/;"	p	language:C++	class:CameraPrivate	access:private	signature:(const ImageType &type, ErrorCode *code)
Channels	channels.cc	/^Channels::Channels() : is_hid_tracking_(false), $/;"	f	language:C++	class:Channels	signature:()
Channels	channels.h	/^  Channels();$/;"	p	language:C++	class:Channels	access:public	signature:()
Channels	channels.h	/^class MYNTEYE_API Channels {$/;"	c	language:C++
Channels::Channels	channels.cc	/^Channels::Channels() : is_hid_tracking_(false), $/;"	f	language:C++	class:Channels	signature:()
Channels::Channels	channels.h	/^  Channels();$/;"	p	language:C++	class:Channels	access:public	signature:()
Channels::DoHidTrack	channels.cc	/^void Channels::DoHidTrack() {$/;"	f	language:C++	class:Channels	signature:()
Channels::DoHidTrack	channels.h	/^  void DoHidTrack();$/;"	p	language:C++	class:Channels	access:public	signature:()
Channels::ExtractHidData	channels.cc	/^bool Channels::ExtractHidData(ImuResPacket &imu, ImgInfoResPacket &img) {$/;"	f	language:C++	class:Channels	signature:(ImuResPacket &imu, ImgInfoResPacket &img)
Channels::ExtractHidData	channels.h	/^  bool ExtractHidData(ImuResPacket &imu, ImgInfoResPacket &img);$/;"	p	language:C++	class:Channels	access:protected	signature:(ImuResPacket &imu, ImgInfoResPacket &img)
Channels::ReadHidData	channels.cc	/^int Channels::ReadHidData(std::uint8_t *data, int length) {$/;"	f	language:C++	class:Channels	signature:(std::uint8_t *data, int length)
Channels::ReadHidData	channels.h	/^  int ReadHidData(std::uint8_t *data, int length);$/;"	p	language:C++	class:Channels	access:protected	signature:(std::uint8_t *data, int length)
Channels::SetImgInfoCallback	channels.cc	/^void Channels::SetImgInfoCallback(img_callback_t callback) {$/;"	f	language:C++	class:Channels	signature:(img_callback_t callback)
Channels::SetImgInfoCallback	channels.h	/^  void SetImgInfoCallback(img_callback_t callback);$/;"	p	language:C++	class:Channels	access:public	signature:(img_callback_t callback)
Channels::SetImuCallback	channels.cc	/^void Channels::SetImuCallback(imu_callback_t callback) {$/;"	f	language:C++	class:Channels	signature:(imu_callback_t callback)
Channels::SetImuCallback	channels.h	/^  void SetImuCallback(imu_callback_t callback);$/;"	p	language:C++	class:Channels	access:public	signature:(imu_callback_t callback)
Channels::StartHidTracking	channels.cc	/^void Channels::StartHidTracking() {$/;"	f	language:C++	class:Channels	signature:()
Channels::StartHidTracking	channels.h	/^  void StartHidTracking();$/;"	p	language:C++	class:Channels	access:public	signature:()
Channels::StopHidTracking	channels.cc	/^bool Channels::StopHidTracking() {$/;"	f	language:C++	class:Channels	signature:()
Channels::StopHidTracking	channels.h	/^  bool StopHidTracking();$/;"	p	language:C++	class:Channels	access:public	signature:()
Channels::device_	channels.h	/^  std::shared_ptr<hid::hid_device> device_;$/;"	m	language:C++	class:Channels	access:private
Channels::hid_track_stop_	channels.h	/^  volatile bool hid_track_stop_;$/;"	m	language:C++	class:Channels	access:private
Channels::hid_track_thread_	channels.h	/^  std::thread hid_track_thread_;$/;"	m	language:C++	class:Channels	access:private
Channels::img_callback_	channels.h	/^  img_callback_t img_callback_;$/;"	m	language:C++	class:Channels	access:private
Channels::imu_callback_	channels.h	/^  imu_callback_t imu_callback_;$/;"	m	language:C++	class:Channels	access:private
Channels::is_hid_tracking_	channels.h	/^  bool is_hid_tracking_;$/;"	m	language:C++	class:Channels	access:private
Channels::~Channels	channels.cc	/^Channels::~Channels() {$/;"	f	language:C++	class:Channels	signature:()
Channels::~Channels	channels.h	/^  virtual ~Channels();$/;"	p	language:C++	class:Channels	access:public	signature:()
CheckOpened	camera_p.cc	/^void CameraPrivate::CheckOpened() const {$/;"	f	language:C++	class:CameraPrivate	signature:() const
CheckOpened	camera_p.h	/^  void CheckOpened() const;$/;"	p	language:C++	class:CameraPrivate	access:public	signature:() const
Close	camera_p.cc	/^void CameraPrivate::Close() {$/;"	f	language:C++	class:CameraPrivate	signature:()
Close	camera_p.h	/^  void Close();$/;"	p	language:C++	class:CameraPrivate	access:public	signature:()
ColorMap	camera_p_win.cc	/^void ColorMap(double k, double& R, double& G, double& B) {  \/\/ NOLINT$/;"	f	language:C++	namespace:__anon2	signature:(double k, double& R, double& G, double& B)
DATA_SIZE	channels.cc	6;"	d	language:C++	file:
DmColorMode14	camera_p_win.cc	/^void DmColorMode14(RGBQUAD* pallete, int mode = 0) {$/;"	f	language:C++	namespace:__anon2	signature:(RGBQUAD* pallete, int mode = 0)
DoHidTrack	channels.cc	/^void Channels::DoHidTrack() {$/;"	f	language:C++	class:Channels	signature:()
DoHidTrack	channels.h	/^  void DoHidTrack();$/;"	p	language:C++	class:Channels	access:public	signature:()
ExtractHidData	channels.cc	/^bool Channels::ExtractHidData(ImuResPacket &imu, ImgInfoResPacket &img) {$/;"	f	language:C++	class:Channels	signature:(ImuResPacket &imu, ImgInfoResPacket &img)
ExtractHidData	channels.h	/^  bool ExtractHidData(ImuResPacket &imu, ImgInfoResPacket &img);$/;"	p	language:C++	class:Channels	access:protected	signature:(ImuResPacket &imu, ImgInfoResPacket &img)
GetDevices	camera_p.cc	/^void CameraPrivate::GetDevices(std::vector<DeviceInfo>* dev_infos) {$/;"	f	language:C++	class:CameraPrivate	signature:(std::vector<DeviceInfo>* dev_infos)
GetDevices	camera_p.h	/^  void GetDevices(std::vector<DeviceInfo>* dev_infos);$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(std::vector<DeviceInfo>* dev_infos)
GetFWRegister	camera_p.cc	/^bool CameraPrivate::GetFWRegister(std::uint16_t address, std::uint16_t* value,$/;"	f	language:C++	class:CameraPrivate	signature:(std::uint16_t address, std::uint16_t* value, int flag)
GetFWRegister	camera_p.h	/^  bool GetFWRegister(std::uint16_t address, std::uint16_t* value,$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(std::uint16_t address, std::uint16_t* value, int flag = FG_Address_1Byte)
GetHWRegister	camera_p.cc	/^bool CameraPrivate::GetHWRegister(std::uint16_t address, std::uint16_t* value,$/;"	f	language:C++	class:CameraPrivate	signature:(std::uint16_t address, std::uint16_t* value, int flag)
GetHWRegister	camera_p.h	/^  bool GetHWRegister(std::uint16_t address, std::uint16_t* value,$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(std::uint16_t address, std::uint16_t* value, int flag = FG_Address_1Byte)
GetImuData	camera_p.cc	/^std::vector<device::MotionData> CameraPrivate::GetImuData() {$/;"	f	language:C++	class:CameraPrivate	signature:()
GetImuData	camera_p.h	/^  motion_datas_t GetImuData();$/;"	p	language:C++	class:CameraPrivate	access:public	signature:()
GetResolutionIndex	camera_p.cc	/^void CameraPrivate::GetResolutionIndex(const InitParams& params,$/;"	f	language:C++	class:CameraPrivate	signature:(const InitParams& params, int* color_res_index, int* depth_res_index)
GetResolutionIndex	camera_p.cc	/^void CameraPrivate::GetResolutionIndex(const std::int32_t& dev_index,$/;"	f	language:C++	class:CameraPrivate	signature:(const std::int32_t& dev_index, const StreamMode& stream_mode, const StreamFormat& color_stream_format, const StreamFormat& depth_stream_format, int *color_res_index, int *depth_res_index)
GetResolutionIndex	camera_p.h	/^  void GetResolutionIndex(const InitParams& params,$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(const InitParams& params, int* color_res_index, int* depth_res_index)
GetResolutionIndex	camera_p.h	/^  void GetResolutionIndex(const std::int32_t& dev_index,$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(const std::int32_t& dev_index, const StreamMode& stream_mode, const StreamFormat& color_stream_format, const StreamFormat& depth_stream_format, int* color_res_index, int* depth_res_index)
GetResolutions	camera_p.cc	/^void CameraPrivate::GetResolutions(const std::int32_t& dev_index,$/;"	f	language:C++	class:CameraPrivate	signature:(const std::int32_t& dev_index, std::vector<StreamInfo>* color_infos, std::vector<StreamInfo>* depth_infos)
GetResolutions	camera_p.h	/^  void GetResolutions(const std::int32_t& dev_index,$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(const std::int32_t& dev_index, std::vector<StreamInfo>* color_infos, std::vector<StreamInfo>* depth_infos)
GetSensorRegister	camera_p.cc	/^bool CameraPrivate::GetSensorRegister(int id, std::uint16_t address,$/;"	f	language:C++	class:CameraPrivate	signature:(int id, std::uint16_t address, std::uint16_t* value, int flag)
GetSensorRegister	camera_p.h	/^  bool GetSensorRegister(int id, std::uint16_t address, std::uint16_t* value,$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(int id, std::uint16_t address, std::uint16_t* value, int flag = FG_Address_1Byte)
HID_H_	hid.h	2;"	d	language:C++
ImageInfoCallback	camera_p.cc	/^void CameraPrivate::ImageInfoCallback(const ImgInfoPacket &packet) {$/;"	f	language:C++	class:CameraPrivate	signature:(const ImgInfoPacket &packet)
ImageInfoCallback	camera_p.h	/^  void ImageInfoCallback(const ImgInfoPacket &packet);$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(const ImgInfoPacket &packet)
ImgCallback	camera_p.h	/^  static void ImgCallback(EtronDIImageType::Value imgType, int imgId,$/;"	p	language:C++	class:CameraPrivate	access:private	signature:(EtronDIImageType::Value imgType, int imgId, unsigned char* imgBuf, int imgSize, int width, int height, int serialNumber, void *pParam)
ImgCallback	camera_p_win.cc	/^void CameraPrivate::ImgCallback(EtronDIImageType::Value imgType, int imgId,$/;"	f	language:C++	class:CameraPrivate	signature:(EtronDIImageType::Value imgType, int imgId, unsigned char* imgBuf, int imgSize, int width, int height, int serialNumber, void *pParam)
ImgInfoPacket	types.h	/^  ImgInfoPacket() = default;$/;"	p	language:C++	struct:ImgInfoPacket	access:public	signature:()
ImgInfoPacket	types.h	/^  explicit ImgInfoPacket(std::uint8_t *data) {$/;"	f	language:C++	struct:ImgInfoPacket	access:public	signature:(std::uint8_t *data)
ImgInfoPacket	types.h	/^struct ImgInfoPacket {$/;"	s	language:C++
ImgInfoPacket::ImgInfoPacket	types.h	/^  ImgInfoPacket() = default;$/;"	p	language:C++	struct:ImgInfoPacket	access:public	signature:()
ImgInfoPacket::ImgInfoPacket	types.h	/^  explicit ImgInfoPacket(std::uint8_t *data) {$/;"	f	language:C++	struct:ImgInfoPacket	access:public	signature:(std::uint8_t *data)
ImgInfoPacket::exposure_time	types.h	/^  std::uint16_t exposure_time;$/;"	m	language:C++	struct:ImgInfoPacket	access:public
ImgInfoPacket::frame_id	types.h	/^  std::uint16_t frame_id;$/;"	m	language:C++	struct:ImgInfoPacket	access:public
ImgInfoPacket::from_data	types.h	/^  void from_data(std::uint8_t *data) {$/;"	f	language:C++	struct:ImgInfoPacket	access:public	signature:(std::uint8_t *data)
ImgInfoPacket::timestamp	types.h	/^  std::uint32_t timestamp;$/;"	m	language:C++	struct:ImgInfoPacket	access:public
ImgInfoResPacket	types.h	/^  ImgInfoResPacket() = default;$/;"	p	language:C++	struct:ImgInfoResPacket	access:public	signature:()
ImgInfoResPacket	types.h	/^  explicit ImgInfoResPacket(std::uint8_t *data) {$/;"	f	language:C++	struct:ImgInfoResPacket	access:public	signature:(std::uint8_t *data)
ImgInfoResPacket	types.h	/^struct ImgInfoResPacket {$/;"	s	language:C++
ImgInfoResPacket::ImgInfoResPacket	types.h	/^  ImgInfoResPacket() = default;$/;"	p	language:C++	struct:ImgInfoResPacket	access:public	signature:()
ImgInfoResPacket::ImgInfoResPacket	types.h	/^  explicit ImgInfoResPacket(std::uint8_t *data) {$/;"	f	language:C++	struct:ImgInfoResPacket	access:public	signature:(std::uint8_t *data)
ImgInfoResPacket::from_data	types.h	/^  void from_data(std::uint8_t *data) {$/;"	f	language:C++	struct:ImgInfoResPacket	access:public	signature:(std::uint8_t *data)
ImgInfoResPacket::packets	types.h	/^  std::vector<ImgInfoPacket> packets;$/;"	m	language:C++	struct:ImgInfoResPacket	access:public
ImuDataCallback	camera_p.cc	/^void CameraPrivate::ImuDataCallback(const ImuPacket &packet) {$/;"	f	language:C++	class:CameraPrivate	signature:(const ImuPacket &packet)
ImuDataCallback	camera_p.h	/^  void ImuDataCallback(const ImuPacket &packet);$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(const ImuPacket &packet)
ImuPacket	types.h	/^  ImuPacket() = default;$/;"	p	language:C++	struct:ImuPacket	access:public	signature:()
ImuPacket	types.h	/^  explicit ImuPacket(std::uint8_t *data) {$/;"	f	language:C++	struct:ImuPacket	access:public	signature:(std::uint8_t *data)
ImuPacket	types.h	/^struct ImuPacket {$/;"	s	language:C++
ImuPacket::ImuPacket	types.h	/^  ImuPacket() = default;$/;"	p	language:C++	struct:ImuPacket	access:public	signature:()
ImuPacket::ImuPacket	types.h	/^  explicit ImuPacket(std::uint8_t *data) {$/;"	f	language:C++	struct:ImuPacket	access:public	signature:(std::uint8_t *data)
ImuPacket::from_data	types.h	/^  void from_data(std::uint8_t *data) {$/;"	f	language:C++	struct:ImuPacket	access:public	signature:(std::uint8_t *data)
ImuPacket::segments	types.h	/^  std::vector<ImuSegment> segments;$/;"	m	language:C++	struct:ImuPacket	access:public
ImuResPacket	types.h	/^  ImuResPacket() = default;$/;"	p	language:C++	struct:ImuResPacket	access:public	signature:()
ImuResPacket	types.h	/^  explicit ImuResPacket(std::uint8_t *data) {$/;"	f	language:C++	struct:ImuResPacket	access:public	signature:(std::uint8_t *data)
ImuResPacket	types.h	/^struct ImuResPacket {$/;"	s	language:C++
ImuResPacket::ImuResPacket	types.h	/^  ImuResPacket() = default;$/;"	p	language:C++	struct:ImuResPacket	access:public	signature:()
ImuResPacket::ImuResPacket	types.h	/^  explicit ImuResPacket(std::uint8_t *data) {$/;"	f	language:C++	struct:ImuResPacket	access:public	signature:(std::uint8_t *data)
ImuResPacket::from_data	types.h	/^  void from_data(std::uint8_t *data) {$/;"	f	language:C++	struct:ImuResPacket	access:public	signature:(std::uint8_t *data)
ImuResPacket::from_header_data	types.h	/^  void from_header_data(std::uint8_t *data) {$/;"	f	language:C++	struct:ImuResPacket	access:public	signature:(std::uint8_t *data)
ImuResPacket::header	types.h	/^  std::uint8_t header;$/;"	m	language:C++	struct:ImuResPacket	access:public
ImuResPacket::packets	types.h	/^  std::vector<ImuPacket> packets;$/;"	m	language:C++	struct:ImuResPacket	access:public
ImuSegment	types.h	/^  ImuSegment() = default;$/;"	p	language:C++	struct:ImuSegment	access:public	signature:()
ImuSegment	types.h	/^  explicit ImuSegment(std::uint8_t *data) {$/;"	f	language:C++	struct:ImuSegment	access:public	signature:(std::uint8_t *data)
ImuSegment	types.h	/^struct ImuSegment {$/;"	s	language:C++
ImuSegment::ImuSegment	types.h	/^  ImuSegment() = default;$/;"	p	language:C++	struct:ImuSegment	access:public	signature:()
ImuSegment::ImuSegment	types.h	/^  explicit ImuSegment(std::uint8_t *data) {$/;"	f	language:C++	struct:ImuSegment	access:public	signature:(std::uint8_t *data)
ImuSegment::accel_or_gyro	types.h	/^  std::int16_t accel_or_gyro[3];$/;"	m	language:C++	struct:ImuSegment	access:public
ImuSegment::flag	types.h	/^  std::uint8_t flag;$/;"	m	language:C++	struct:ImuSegment	access:public
ImuSegment::from_data	types.h	/^  void from_data(std::uint8_t *data) {$/;"	f	language:C++	struct:ImuSegment	access:public	signature:(std::uint8_t *data)
ImuSegment::temperature	types.h	/^  std::int16_t temperature;$/;"	m	language:C++	struct:ImuSegment	access:public
ImuSegment::timestamp	types.h	/^  std::uint32_t timestamp;$/;"	m	language:C++	struct:ImuSegment	access:public
IsOpened	camera_p.cc	/^bool CameraPrivate::IsOpened() const {$/;"	f	language:C++	class:CameraPrivate	signature:() const
IsOpened	camera_p.h	/^  bool IsOpened() const;$/;"	p	language:C++	class:CameraPrivate	access:public	signature:() const
MYNTEYE_INTERNAL_CAMERA_P_H_	camera_p.h	15;"	d	language:C++
MYNTEYE_INTERNAL_CHANNELS_H_	channels.h	2;"	d	language:C++
MYNTEYE_INTERNAL_SYNTHETIC_H_	synthetic.h	2;"	d	language:C++
MYNTEYE_INTERNAL_TYPES_H_	types.h	2;"	d	language:C++
OnInit	camera_p.h	/^  void OnInit();$/;"	p	language:C++	class:CameraPrivate	access:private	signature:()
OnInit	camera_p_linux.cc	/^void CameraPrivate::OnInit() {$/;"	f	language:C++	class:CameraPrivate	signature:()
OnInit	camera_p_win.cc	/^void CameraPrivate::OnInit() {$/;"	f	language:C++	class:CameraPrivate	signature:()
OnPostWait	camera_p.h	/^  void OnPostWait();$/;"	p	language:C++	class:CameraPrivate	access:private	signature:()
OnPostWait	camera_p_linux.cc	/^void CameraPrivate::OnPostWait() {$/;"	f	language:C++	class:CameraPrivate	signature:()
OnPostWait	camera_p_win.cc	/^void CameraPrivate::OnPostWait() {$/;"	f	language:C++	class:CameraPrivate	signature:()
OnPreWait	camera_p.h	/^  void OnPreWait();$/;"	p	language:C++	class:CameraPrivate	access:private	signature:()
OnPreWait	camera_p_linux.cc	/^void CameraPrivate::OnPreWait() {$/;"	f	language:C++	class:CameraPrivate	signature:()
OnPreWait	camera_p_win.cc	/^void CameraPrivate::OnPreWait() {$/;"	f	language:C++	class:CameraPrivate	signature:()
Open	camera_p.cc	/^ErrorCode CameraPrivate::Open(const InitParams& params) {$/;"	f	language:C++	class:CameraPrivate	signature:(const InitParams& params)
Open	camera_p.h	/^  ErrorCode Open(const InitParams& params);$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(const InitParams& params)
PACKET_SIZE	channels.cc	5;"	d	language:C++	file:
ReadHidData	channels.cc	/^int Channels::ReadHidData(std::uint8_t *data, int length) {$/;"	f	language:C++	class:Channels	signature:(std::uint8_t *data, int length)
ReadHidData	channels.h	/^  int ReadHidData(std::uint8_t *data, int length);$/;"	p	language:C++	class:Channels	access:protected	signature:(std::uint8_t *data, int length)
ReleaseBuf	camera_p.cc	/^void CameraPrivate::ReleaseBuf() {$/;"	f	language:C++	class:CameraPrivate	signature:()
ReleaseBuf	camera_p.h	/^  void ReleaseBuf();$/;"	p	language:C++	class:CameraPrivate	access:private	signature:()
RetrieveImage	camera_p.cc	/^std::vector<device::StreamData> CameraPrivate::RetrieveImage(const ImageType& type,$/;"	f	language:C++	class:CameraPrivate	signature:(const ImageType& type, ErrorCode* code)
RetrieveImage	camera_p.h	/^  stream_datas_t RetrieveImage(const ImageType& type, ErrorCode* code);$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(const ImageType& type, ErrorCode* code)
RetrieveImageColor	camera_p.h	/^  Image::pointer RetrieveImageColor(ErrorCode* code);$/;"	p	language:C++	class:CameraPrivate	access:private	signature:(ErrorCode* code)
RetrieveImageColor	camera_p_linux.cc	/^Image::pointer CameraPrivate::RetrieveImageColor(ErrorCode* code) {$/;"	f	language:C++	class:CameraPrivate	signature:(ErrorCode* code)
RetrieveImageColor	camera_p_win.cc	/^Image::pointer CameraPrivate::RetrieveImageColor(ErrorCode* code) {$/;"	f	language:C++	class:CameraPrivate	signature:(ErrorCode* code)
RetrieveImageDepth	camera_p.h	/^  Image::pointer RetrieveImageDepth(ErrorCode* code);$/;"	p	language:C++	class:CameraPrivate	access:private	signature:(ErrorCode* code)
RetrieveImageDepth	camera_p_linux.cc	/^Image::pointer CameraPrivate::RetrieveImageDepth(ErrorCode* code) {$/;"	f	language:C++	class:CameraPrivate	signature:(ErrorCode* code)
RetrieveImageDepth	camera_p_win.cc	/^Image::pointer CameraPrivate::RetrieveImageDepth(ErrorCode* code) {$/;"	f	language:C++	class:CameraPrivate	signature:(ErrorCode* code)
RetrieveLatestImage	camera_p.cc	/^CameraPrivate::stream_data_t CameraPrivate::RetrieveLatestImage(const ImageType& type,$/;"	f	language:C++	class:CameraPrivate	signature:(const ImageType& type, ErrorCode* code)
RetrieveLatestImage	camera_p.h	/^  stream_data_t RetrieveLatestImage(const ImageType& type, ErrorCode* code);$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(const ImageType& type, ErrorCode* code)
SetAutoExposureEnabled	camera_p.cc	/^ErrorCode CameraPrivate::SetAutoExposureEnabled(bool enabled) {$/;"	f	language:C++	class:CameraPrivate	signature:(bool enabled)
SetAutoExposureEnabled	camera_p.h	/^  ErrorCode SetAutoExposureEnabled(bool enabled);$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(bool enabled)
SetAutoWhiteBalanceEnabled	camera_p.cc	/^ErrorCode CameraPrivate::SetAutoWhiteBalanceEnabled(bool enabled) {$/;"	f	language:C++	class:CameraPrivate	signature:(bool enabled)
SetAutoWhiteBalanceEnabled	camera_p.h	/^  ErrorCode SetAutoWhiteBalanceEnabled(bool enabled);$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(bool enabled)
SetFWRegister	camera_p.cc	/^bool CameraPrivate::SetFWRegister(std::uint16_t address, std::uint16_t value,$/;"	f	language:C++	class:CameraPrivate	signature:(std::uint16_t address, std::uint16_t value, int flag)
SetFWRegister	camera_p.h	/^  bool SetFWRegister(std::uint16_t address, std::uint16_t value,$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(std::uint16_t address, std::uint16_t value, int flag = FG_Address_1Byte)
SetHWRegister	camera_p.cc	/^bool CameraPrivate::SetHWRegister(std::uint16_t address, std::uint16_t value,$/;"	f	language:C++	class:CameraPrivate	signature:(std::uint16_t address, std::uint16_t value, int flag)
SetHWRegister	camera_p.h	/^  bool SetHWRegister(std::uint16_t address, std::uint16_t value,$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(std::uint16_t address, std::uint16_t value, int flag = FG_Address_1Byte)
SetHidCallback	camera_p.h	/^  void SetHidCallback();$/;"	p	language:C++	class:CameraPrivate	access:public	signature:()
SetImgInfoCallback	channels.cc	/^void Channels::SetImgInfoCallback(img_callback_t callback) {$/;"	f	language:C++	class:Channels	signature:(img_callback_t callback)
SetImgInfoCallback	channels.h	/^  void SetImgInfoCallback(img_callback_t callback);$/;"	p	language:C++	class:Channels	access:public	signature:(img_callback_t callback)
SetImuCallback	channels.cc	/^void Channels::SetImuCallback(imu_callback_t callback) {$/;"	f	language:C++	class:Channels	signature:(imu_callback_t callback)
SetImuCallback	channels.h	/^  void SetImuCallback(imu_callback_t callback);$/;"	p	language:C++	class:Channels	access:public	signature:(imu_callback_t callback)
SetSensorRegister	camera_p.cc	/^bool CameraPrivate::SetSensorRegister(int id, std::uint16_t address,$/;"	f	language:C++	class:CameraPrivate	signature:(int id, std::uint16_t address, std::uint16_t value, int flag)
SetSensorRegister	camera_p.h	/^  bool SetSensorRegister(int id, std::uint16_t address, std::uint16_t value,$/;"	p	language:C++	class:CameraPrivate	access:public	signature:(int id, std::uint16_t address, std::uint16_t value, int flag = FG_Address_1Byte)
StartCaptureImage	camera_p.cc	/^void CameraPrivate::StartCaptureImage() {$/;"	f	language:C++	class:CameraPrivate	signature:()
StartCaptureImage	camera_p.h	/^  void StartCaptureImage();$/;"	p	language:C++	class:CameraPrivate	access:public	signature:()
StartHidTracking	camera_p.cc	/^ErrorCode CameraPrivate::StartHidTracking() {$/;"	f	language:C++	class:CameraPrivate	signature:()
StartHidTracking	camera_p.h	/^  ErrorCode StartHidTracking();$/;"	p	language:C++	class:CameraPrivate	access:public	signature:()
StartHidTracking	channels.cc	/^void Channels::StartHidTracking() {$/;"	f	language:C++	class:Channels	signature:()
StartHidTracking	channels.h	/^  void StartHidTracking();$/;"	p	language:C++	class:Channels	access:public	signature:()
StopCaptureImage	camera_p.cc	/^void CameraPrivate::StopCaptureImage() {$/;"	f	language:C++	class:CameraPrivate	signature:()
StopCaptureImage	camera_p.h	/^  void StopCaptureImage();$/;"	p	language:C++	class:CameraPrivate	access:public	signature:()
StopHidTracking	channels.cc	/^bool Channels::StopHidTracking() {$/;"	f	language:C++	class:Channels	signature:()
StopHidTracking	channels.h	/^  bool StopHidTracking();$/;"	p	language:C++	class:Channels	access:public	signature:()
Synthetic	camera_p.cc	/^void CameraPrivate::Synthetic(const ImageType &type) {$/;"	f	language:C++	class:CameraPrivate	signature:(const ImageType &type)
Synthetic	camera_p.h	/^  void Synthetic(const ImageType &type);$/;"	p	language:C++	class:CameraPrivate	access:private	signature:(const ImageType &type)
Synthetic	synthetic.h	/^class Synthetic {$/;"	c	language:C++
Synthetic::~Synthetic	synthetic.h	/^  ~Synthetic();$/;"	p	language:C++	class:Synthetic	access:public	signature:()
UpdateZ14DisplayImage_DIB24	camera_p_win.cc	/^void UpdateZ14DisplayImage_DIB24(RGBQUAD* pColorPaletteZ14, BYTE* pDepthZ14,$/;"	f	language:C++	namespace:__anon2	signature:(RGBQUAD* pColorPaletteZ14, BYTE* pDepthZ14, BYTE* pDepthDIB24, int cx, int cy)
Wait	camera_p.cc	/^void CameraPrivate::Wait() {$/;"	f	language:C++	class:CameraPrivate	signature:()
Wait	camera_p.h	/^  void Wait();$/;"	p	language:C++	class:CameraPrivate	access:public	signature:()
__anon1::get_stream_format_string	camera_p.cc	/^std::string get_stream_format_string(const StreamFormat& stream_format) {$/;"	f	language:C++	namespace:__anon1	signature:(const StreamFormat& stream_format)
__anon1::get_stream_size	camera_p.cc	/^void get_stream_size(const StreamMode& stream_mode, int* width, int* height) {$/;"	f	language:C++	namespace:__anon1	signature:(const StreamMode& stream_mode, int* width, int* height)
__anon2::ColorMap	camera_p_win.cc	/^void ColorMap(double k, double& R, double& G, double& B) {  \/\/ NOLINT$/;"	f	language:C++	namespace:__anon2	signature:(double k, double& R, double& G, double& B)
__anon2::DmColorMode14	camera_p_win.cc	/^void DmColorMode14(RGBQUAD* pallete, int mode = 0) {$/;"	f	language:C++	namespace:__anon2	signature:(RGBQUAD* pallete, int mode = 0)
__anon2::UpdateZ14DisplayImage_DIB24	camera_p_win.cc	/^void UpdateZ14DisplayImage_DIB24(RGBQUAD* pColorPaletteZ14, BYTE* pDepthZ14,$/;"	f	language:C++	namespace:__anon2	signature:(RGBQUAD* pColorPaletteZ14, BYTE* pDepthZ14, BYTE* pDepthDIB24, int cx, int cy)
accel_or_gyro	types.h	/^  std::int16_t accel_or_gyro[3];$/;"	m	language:C++	struct:ImuSegment	access:public
add_hid	hid.h	/^  void add_hid(hid_t *hid);$/;"	p	language:C++	class:hid::hid_device	access:protected	signature:(hid_t *hid)
add_hid	hid_linux.c	/^static void add_hid(hid_t *h)$/;"	f	language:C	file:	signature:(hid_t *h)
add_hid	hid_linux.c	/^static void add_hid(hid_t *h);$/;"	p	language:C	file:	signature:(hid_t *h)
add_hid	hid_linux.cc	/^void hid_device::add_hid(hid_t *hid) {$/;"	f	language:C++	class:hid::hid_device	signature:(hid_t *hid)
add_hid	hid_macosx.c	/^static void add_hid(hid_t *);$/;"	p	language:C	file:	signature:(hid_t *)
add_hid	hid_macosx.c	/^static void add_hid(hid_t *h)$/;"	f	language:C	file:	signature:(hid_t *h)
add_hid	hid_windows.c	/^static void add_hid(hid_t *h)$/;"	f	language:C	file:	signature:(hid_t *h)
add_hid	hid_windows.c	/^static void add_hid(hid_t *h);$/;"	p	language:C	file:	signature:(hid_t *h)
attach_callback	hid_macosx.c	/^static void attach_callback(void *, IOReturn, void *, IOHIDDeviceRef);$/;"	p	language:C	file:	signature:(void *, IOReturn, void *, IOHIDDeviceRef)
attach_callback	hid_macosx.c	/^static void attach_callback(void *context, IOReturn r, void *hid_mgr, IOHIDDeviceRef dev)$/;"	f	language:C	file:	signature:(void *context, IOReturn r, void *hid_mgr, IOHIDDeviceRef dev)
buf	hid_macosx.c	/^	uint8_t buf[BUFFER_SIZE];$/;"	m	language:C	struct:buffer_struct	file:	access:public
buffer	hid_macosx.c	/^	uint8_t buffer[BUFFER_SIZE];$/;"	m	language:C	struct:hid_struct	file:	access:public
buffer_struct	hid_macosx.c	/^struct buffer_struct {$/;"	s	language:C	file:
buffer_struct::buf	hid_macosx.c	/^	uint8_t buf[BUFFER_SIZE];$/;"	m	language:C	struct:buffer_struct	file:	access:public
buffer_struct::len	hid_macosx.c	/^	uint32_t len;$/;"	m	language:C	struct:buffer_struct	file:	access:public
buffer_struct::next	hid_macosx.c	/^	struct buffer_struct *next;$/;"	m	language:C	struct:buffer_struct	typeref:struct:buffer_struct::buffer_struct	file:	access:public
buffer_t	hid_macosx.c	/^typedef struct buffer_struct buffer_t;$/;"	t	language:C	typeref:struct:buffer_struct	file:
cap_color_mtx_	camera_p.h	/^  std::mutex cap_color_mtx_;$/;"	m	language:C++	class:CameraPrivate	access:private
cap_depth_mtx_	camera_p.h	/^  std::mutex cap_depth_mtx_;$/;"	m	language:C++	class:CameraPrivate	access:private
cap_image_thread_	camera_p.h	/^  std::thread cap_image_thread_;$/;"	m	language:C++	class:CameraPrivate	access:private
channels_	camera_p.h	/^  std::shared_ptr<Channels> channels_;$/;"	m	language:C++	class:CameraPrivate	access:private
check_sum	camera_p.cc	/^inline std::uint8_t check_sum(std::uint8_t *buf, std::uint8_t length) {$/;"	f	language:C++	signature:(std::uint8_t *buf, std::uint8_t length)
close	hid.h	/^  void close(int num);$/;"	p	language:C++	class:hid::hid_device	access:public	signature:(int num)
close	hid_linux.cc	/^void hid_device::close(int num) {$/;"	f	language:C++	class:hid::hid_device	signature:(int num)
color_data_	camera_p.h	/^  stream_datas_t color_data_;$/;"	m	language:C++	class:CameraPrivate	access:private
color_image_buf_	camera_p.h	/^  Image::pointer color_image_buf_;$/;"	m	language:C++	class:CameraPrivate	access:private
color_image_size_	camera_p.h	/^  image_size_t color_image_size_;$/;"	m	language:C++	class:CameraPrivate	access:private
color_palette_z14_	camera_p.h	/^  RGBQUAD color_palette_z14_[16384];$/;"	m	language:C++	class:CameraPrivate	access:private
color_res_index_	camera_p.h	/^  int color_res_index_;$/;"	m	language:C++	class:CameraPrivate	access:private
color_serial_number_	camera_p.h	/^  int color_serial_number_;$/;"	m	language:C++	class:CameraPrivate	access:private
counter	camera_p.cc	/^std::uint16_t CameraPrivate::counter = 1;$/;"	m	language:C++	class:CameraPrivate	file:
counter	camera_p.h	/^  static std::uint16_t counter;$/;"	m	language:C++	class:CameraPrivate	access:private
depth_buf_	camera_p.h	/^  unsigned char* depth_buf_;$/;"	m	language:C++	class:CameraPrivate	access:private
depth_data_	camera_p.h	/^  stream_datas_t depth_data_;$/;"	m	language:C++	class:CameraPrivate	access:private
depth_data_type_	camera_p.h	/^  int depth_data_type_;$/;"	m	language:C++	class:CameraPrivate	access:private
depth_image_buf_	camera_p.h	/^  Image::pointer depth_image_buf_;$/;"	m	language:C++	class:CameraPrivate	access:private
depth_image_size_	camera_p.h	/^  image_size_t depth_image_size_;$/;"	m	language:C++	class:CameraPrivate	access:private
depth_mode_	camera_p.h	/^  DepthMode depth_mode_;$/;"	m	language:C++	class:CameraPrivate	access:private
depth_res_index_	camera_p.h	/^  int depth_res_index_;$/;"	m	language:C++	class:CameraPrivate	access:private
depth_serial_number_	camera_p.h	/^  int depth_serial_number_;$/;"	m	language:C++	class:CameraPrivate	access:private
detach_callback	hid_macosx.c	/^static void detach_callback(void *, IOReturn, void *hid_mgr, IOHIDDeviceRef dev);$/;"	p	language:C	file:	signature:(void *, IOReturn, void *hid_mgr, IOHIDDeviceRef dev)
detach_callback	hid_macosx.c	/^static void detach_callback(void *context, IOReturn r, void *hid_mgr, IOHIDDeviceRef dev)$/;"	f	language:C	file:	signature:(void *context, IOReturn r, void *hid_mgr, IOHIDDeviceRef dev)
dev_sel_info_	camera_p.h	/^  DEVSELINFO dev_sel_info_;$/;"	m	language:C++	class:CameraPrivate	access:private
device_	channels.h	/^  std::shared_ptr<hid::hid_device> device_;$/;"	m	language:C++	class:Channels	access:private
droped	hid.h	/^  void droped();$/;"	p	language:C++	class:hid::hid_device	access:public	signature:()
droped	hid_linux.cc	/^void hid_device::droped() {$/;"	f	language:C++	class:hid::hid_device	signature:()
dtc_	camera_p.h	/^  DEPTH_TRANSFER_CTRL dtc_;$/;"	m	language:C++	class:CameraPrivate	access:private
ep_in	hid.h	/^  int ep_in;$/;"	m	language:C++	struct:hid::hid_struct	access:public
ep_in	hid_linux.c	/^	int ep_in;$/;"	m	language:C	struct:hid_struct	file:	access:public
ep_out	hid.h	/^  int ep_out;$/;"	m	language:C++	struct:hid::hid_struct	access:public
ep_out	hid_linux.c	/^	int ep_out;$/;"	m	language:C	struct:hid_struct	file:	access:public
etron_di_	camera_p.h	/^  void* etron_di_;$/;"	m	language:C++	class:CameraPrivate	access:private
exposure_time	types.h	/^  std::uint16_t exposure_time;$/;"	m	language:C++	struct:ImgInfoPacket	access:public
first_buffer	hid_macosx.c	/^	buffer_t *first_buffer;$/;"	m	language:C	struct:hid_struct	file:	access:public
first_dev	hid_linux.c	/^static struct usb_device *first_dev = NULL;$/;"	v	language:C	typeref:struct:usb_device	file:
first_dev_	hid.h	/^  usb_device_t *first_dev_;$/;"	m	language:C++	class:hid::hid_device	access:private
first_hid	hid_linux.c	/^static hid_t *first_hid = NULL;$/;"	v	language:C	file:
first_hid	hid_macosx.c	/^static hid_t *first_hid = NULL;$/;"	v	language:C	file:
first_hid	hid_windows.c	/^static hid_t *first_hid = NULL;$/;"	v	language:C	file:
first_hid_	hid.h	/^  hid_t *first_hid_;$/;"	m	language:C++	class:hid::hid_device	access:private
flag	types.h	/^  std::uint8_t flag;$/;"	m	language:C++	struct:ImuSegment	access:public
frame_id	types.h	/^  std::uint16_t frame_id;$/;"	m	language:C++	struct:ImgInfoPacket	access:public
framerate_	camera_p.h	/^  int framerate_;$/;"	m	language:C++	class:CameraPrivate	access:private
free_all_hid	hid.h	/^  void free_all_hid(void);$/;"	p	language:C++	class:hid::hid_device	access:protected	signature:(void)
free_all_hid	hid_linux.c	/^static void free_all_hid(void)$/;"	f	language:C	file:	signature:(void)
free_all_hid	hid_linux.c	/^static void free_all_hid(void);$/;"	p	language:C	file:	signature:(void)
free_all_hid	hid_linux.cc	/^void hid_device::free_all_hid(void) {$/;"	f	language:C++	class:hid::hid_device	signature:(void)
free_all_hid	hid_macosx.c	/^static void free_all_hid(void)$/;"	f	language:C	file:	signature:(void)
free_all_hid	hid_macosx.c	/^static void free_all_hid(void);$/;"	p	language:C	file:	signature:(void)
free_all_hid	hid_windows.c	/^static void free_all_hid(void)$/;"	f	language:C	file:	signature:(void)
free_all_hid	hid_windows.c	/^static void free_all_hid(void);$/;"	p	language:C	file:	signature:(void)
from_data	types.h	/^  void from_data(std::uint8_t *data) {$/;"	f	language:C++	struct:ImgInfoPacket	access:public	signature:(std::uint8_t *data)
from_data	types.h	/^  void from_data(std::uint8_t *data) {$/;"	f	language:C++	struct:ImgInfoResPacket	access:public	signature:(std::uint8_t *data)
from_data	types.h	/^  void from_data(std::uint8_t *data) {$/;"	f	language:C++	struct:ImuPacket	access:public	signature:(std::uint8_t *data)
from_data	types.h	/^  void from_data(std::uint8_t *data) {$/;"	f	language:C++	struct:ImuResPacket	access:public	signature:(std::uint8_t *data)
from_data	types.h	/^  void from_data(std::uint8_t *data) {$/;"	f	language:C++	struct:ImuSegment	access:public	signature:(std::uint8_t *data)
from_header_data	types.h	/^  void from_header_data(std::uint8_t *data) {$/;"	f	language:C++	struct:ImuResPacket	access:public	signature:(std::uint8_t *data)
get_DeviceClass	hid_linux.c	/^int get_DeviceClass(int num){$/;"	f	language:C	signature:(int num)
get_device_class	hid.h	/^  int get_device_class();$/;"	p	language:C++	class:hid::hid_device	access:public	signature:()
get_device_class	hid_linux.cc	/^int hid_device::get_device_class() {$/;"	f	language:C++	class:hid::hid_device	signature:()
get_hid	hid.h	/^  hid_t *get_hid(int num);$/;"	p	language:C++	class:hid::hid_device	access:protected	signature:(int num)
get_hid	hid_linux.c	/^static hid_t * get_hid(int num)$/;"	f	language:C	file:	signature:(int num)
get_hid	hid_linux.c	/^static hid_t * get_hid(int num);$/;"	p	language:C	file:	signature:(int num)
get_hid	hid_linux.cc	/^hid::hid_t *hid_device:: get_hid(int num)$/;"	f	language:C++	class:hid::hid_device	signature:(int num)
get_hid	hid_macosx.c	/^static hid_t * get_hid(int num)$/;"	f	language:C	file:	signature:(int num)
get_hid	hid_macosx.c	/^static hid_t * get_hid(int);$/;"	p	language:C	file:	signature:(int)
get_hid	hid_windows.c	/^static hid_t * get_hid(int num)$/;"	f	language:C	file:	signature:(int num)
get_hid	hid_windows.c	/^static hid_t * get_hid(int num);$/;"	p	language:C	file:	signature:(int num)
get_stream_format_string	camera_p.cc	/^std::string get_stream_format_string(const StreamFormat& stream_format) {$/;"	f	language:C++	namespace:__anon1	signature:(const StreamFormat& stream_format)
get_stream_size	camera_p.cc	/^void get_stream_size(const StreamMode& stream_mode, int* width, int* height) {$/;"	f	language:C++	namespace:__anon1	signature:(const StreamMode& stream_mode, int* width, int* height)
handle	hid_windows.c	/^	HANDLE handle;$/;"	m	language:C	struct:hid_struct	file:	access:public
header	types.h	/^  std::uint8_t header;$/;"	m	language:C++	struct:ImuResPacket	access:public
hid	hid.h	/^namespace hid {$/;"	n	language:C++
hid	hid_linux.cc	/^namespace hid {$/;"	n	language:C++	file:
hid::hid_device	hid.h	/^class hid_device {$/;"	c	language:C++	namespace:hid
hid::hid_device::add_hid	hid.h	/^  void add_hid(hid_t *hid);$/;"	p	language:C++	class:hid::hid_device	access:protected	signature:(hid_t *hid)
hid::hid_device::add_hid	hid_linux.cc	/^void hid_device::add_hid(hid_t *hid) {$/;"	f	language:C++	class:hid::hid_device	signature:(hid_t *hid)
hid::hid_device::close	hid.h	/^  void close(int num);$/;"	p	language:C++	class:hid::hid_device	access:public	signature:(int num)
hid::hid_device::close	hid_linux.cc	/^void hid_device::close(int num) {$/;"	f	language:C++	class:hid::hid_device	signature:(int num)
hid::hid_device::droped	hid.h	/^  void droped();$/;"	p	language:C++	class:hid::hid_device	access:public	signature:()
hid::hid_device::droped	hid_linux.cc	/^void hid_device::droped() {$/;"	f	language:C++	class:hid::hid_device	signature:()
hid::hid_device::first_dev_	hid.h	/^  usb_device_t *first_dev_;$/;"	m	language:C++	class:hid::hid_device	access:private
hid::hid_device::first_hid_	hid.h	/^  hid_t *first_hid_;$/;"	m	language:C++	class:hid::hid_device	access:private
hid::hid_device::free_all_hid	hid.h	/^  void free_all_hid(void);$/;"	p	language:C++	class:hid::hid_device	access:protected	signature:(void)
hid::hid_device::free_all_hid	hid_linux.cc	/^void hid_device::free_all_hid(void) {$/;"	f	language:C++	class:hid::hid_device	signature:(void)
hid::hid_device::get_device_class	hid.h	/^  int get_device_class();$/;"	p	language:C++	class:hid::hid_device	access:public	signature:()
hid::hid_device::get_device_class	hid_linux.cc	/^int hid_device::get_device_class() {$/;"	f	language:C++	class:hid::hid_device	signature:()
hid::hid_device::get_hid	hid.h	/^  hid_t *get_hid(int num);$/;"	p	language:C++	class:hid::hid_device	access:protected	signature:(int num)
hid::hid_device::get_hid	hid_linux.cc	/^hid::hid_t *hid_device:: get_hid(int num)$/;"	f	language:C++	class:hid::hid_device	signature:(int num)
hid::hid_device::hid_close	hid.h	/^  void hid_close(hid_t *hid);$/;"	p	language:C++	class:hid::hid_device	access:protected	signature:(hid_t *hid)
hid::hid_device::hid_close	hid_linux.cc	/^void hid_device::hid_close(hid_t *hid) {$/;"	f	language:C++	class:hid::hid_device	signature:(hid_t *hid)
hid::hid_device::hid_device	hid_linux.cc	/^hid_device::hid_device() : first_hid_(nullptr),$/;"	f	language:C++	class:hid::hid_device	signature:()
hid::hid_device::hid_parse_item	hid.h	/^  int hid_parse_item(uint32_t *val, uint8_t **data, const uint8_t *end);$/;"	p	language:C++	class:hid::hid_device	access:protected	signature:(uint32_t *val, uint8_t **data, const uint8_t *end)
hid::hid_device::hid_parse_item	hid_linux.cc	/^int hid_device::hid_parse_item(uint32_t *val, uint8_t **data, const uint8_t *end) {$/;"	f	language:C++	class:hid::hid_device	signature:(uint32_t *val, uint8_t **data, const uint8_t *end)
hid::hid_device::is_opened_	hid.h	/^  bool is_opened_;$/;"	m	language:C++	class:hid::hid_device	access:private
hid::hid_device::last_hid_	hid.h	/^  hid_t *last_hid_;$/;"	m	language:C++	class:hid::hid_device	access:private
hid::hid_device::open	hid.h	/^  int open(int max, int vid, int pid, int usage_page, int usage);$/;"	p	language:C++	class:hid::hid_device	access:public	signature:(int max, int vid, int pid, int usage_page, int usage)
hid::hid_device::open	hid_linux.cc	/^int hid_device::open(int max, int vid, int pid, int usage_page, int usage) {$/;"	f	language:C++	class:hid::hid_device	signature:(int max, int vid, int pid, int usage_page, int usage)
hid::hid_device::process_usb_dev	hid.h	/^  void process_usb_dev(int max, $/;"	p	language:C++	class:hid::hid_device	access:protected	signature:(int max, usb_device_t *dev, usb_interface_t *iface, usb_dev_handle *handle, int &count, int &claimed, int usage, int usage_page)
hid::hid_device::process_usb_dev	hid_linux.cc	/^void hid_device::process_usb_dev(int max, $/;"	f	language:C++	class:hid::hid_device	signature:(int max, usb_device_t *dev, usb_interface_t *iface, usb_dev_handle *handle, int &count, int &claimed, int usage, int usage_page)
hid::hid_device::receive	hid.h	/^  int receive(int num, void* buf, int len, int timeout);$/;"	p	language:C++	class:hid::hid_device	access:public	signature:(int num, void* buf, int len, int timeout)
hid::hid_device::receive	hid_linux.cc	/^int hid_device::receive(int num, void *buf, int len, int timeout) {$/;"	f	language:C++	class:hid::hid_device	signature:(int num, void *buf, int len, int timeout)
hid::hid_device::send	hid.h	/^  int send(int num, void* buf, int len, int timeout);$/;"	p	language:C++	class:hid::hid_device	access:public	signature:(int num, void* buf, int len, int timeout)
hid::hid_device::send	hid_linux.cc	/^int hid_device::send(int num, void *buf, int len, int timeout) {$/;"	f	language:C++	class:hid::hid_device	signature:(int num, void *buf, int len, int timeout)
hid::hid_device::~hid_device	hid.h	/^  virtual ~hid_device();$/;"	p	language:C++	class:hid::hid_device	access:public	signature:()
hid::hid_device::~hid_device	hid_linux.cc	/^hid_device::~hid_device() {$/;"	f	language:C++	class:hid::hid_device	signature:()
hid::hid_struct	hid.h	/^typedef struct hid_struct {$/;"	s	language:C++	namespace:hid
hid::hid_struct::ep_in	hid.h	/^  int ep_in;$/;"	m	language:C++	struct:hid::hid_struct	access:public
hid::hid_struct::ep_out	hid.h	/^  int ep_out;$/;"	m	language:C++	struct:hid::hid_struct	access:public
hid::hid_struct::iface	hid.h	/^  int iface;$/;"	m	language:C++	struct:hid::hid_struct	access:public
hid::hid_struct::next	hid.h	/^  struct hid_struct *next;$/;"	m	language:C++	struct:hid::hid_struct	typeref:struct:hid::hid_struct::hid_struct	access:public
hid::hid_struct::open	hid.h	/^  int open;$/;"	m	language:C++	struct:hid::hid_struct	access:public
hid::hid_struct::prev	hid.h	/^  struct hid_struct *prev;$/;"	m	language:C++	struct:hid::hid_struct	typeref:struct:hid::hid_struct::hid_struct	access:public
hid::hid_struct::usb	hid.h	/^  usb_dev_handle *usb;$/;"	m	language:C++	struct:hid::hid_struct	access:public
hid::hid_t	hid.h	/^}hid_t;$/;"	t	language:C++	namespace:hid	typeref:struct:hid::hid_struct
hid_close	hid.h	/^  void hid_close(hid_t *hid);$/;"	p	language:C++	class:hid::hid_device	access:protected	signature:(hid_t *hid)
hid_close	hid_linux.c	/^static void hid_close(hid_t *hid)$/;"	f	language:C	file:	signature:(hid_t *hid)
hid_close	hid_linux.c	/^static void hid_close(hid_t *hid);$/;"	p	language:C	file:	signature:(hid_t *hid)
hid_close	hid_linux.cc	/^void hid_device::hid_close(hid_t *hid) {$/;"	f	language:C++	class:hid::hid_device	signature:(hid_t *hid)
hid_close	hid_macosx.c	/^static void hid_close(hid_t *);$/;"	p	language:C	file:	signature:(hid_t *)
hid_close	hid_macosx.c	/^static void hid_close(hid_t *hid)$/;"	f	language:C	file:	signature:(hid_t *hid)
hid_close	hid_windows.c	/^static void hid_close(hid_t *hid)$/;"	f	language:C	file:	signature:(hid_t *hid)
hid_close	hid_windows.c	/^static void hid_close(hid_t *hid);$/;"	p	language:C	file:	signature:(hid_t *hid)
hid_device	hid.h	/^class hid_device {$/;"	c	language:C++	namespace:hid
hid_device	hid_linux.cc	/^hid_device::hid_device() : first_hid_(nullptr),$/;"	f	language:C++	class:hid::hid_device	signature:()
hid_parse_item	hid.h	/^  int hid_parse_item(uint32_t *val, uint8_t **data, const uint8_t *end);$/;"	p	language:C++	class:hid::hid_device	access:protected	signature:(uint32_t *val, uint8_t **data, const uint8_t *end)
hid_parse_item	hid_linux.c	/^static int hid_parse_item(uint32_t *val, uint8_t **data, const uint8_t *end)$/;"	f	language:C	file:	signature:(uint32_t *val, uint8_t **data, const uint8_t *end)
hid_parse_item	hid_linux.c	/^static int hid_parse_item(uint32_t *val, uint8_t **data, const uint8_t *end);$/;"	p	language:C	file:	signature:(uint32_t *val, uint8_t **data, const uint8_t *end)
hid_parse_item	hid_linux.cc	/^int hid_device::hid_parse_item(uint32_t *val, uint8_t **data, const uint8_t *end) {$/;"	f	language:C++	class:hid::hid_device	signature:(uint32_t *val, uint8_t **data, const uint8_t *end)
hid_struct	hid.h	/^typedef struct hid_struct {$/;"	s	language:C++	namespace:hid
hid_struct	hid_linux.c	/^struct hid_struct {$/;"	s	language:C	file:
hid_struct	hid_macosx.c	/^struct hid_struct {$/;"	s	language:C	file:
hid_struct	hid_windows.c	/^struct hid_struct {$/;"	s	language:C	file:
hid_struct::buffer	hid_macosx.c	/^	uint8_t buffer[BUFFER_SIZE];$/;"	m	language:C	struct:hid_struct	file:	access:public
hid_struct::ep_in	hid_linux.c	/^	int ep_in;$/;"	m	language:C	struct:hid_struct	file:	access:public
hid_struct::ep_out	hid_linux.c	/^	int ep_out;$/;"	m	language:C	struct:hid_struct	file:	access:public
hid_struct::first_buffer	hid_macosx.c	/^	buffer_t *first_buffer;$/;"	m	language:C	struct:hid_struct	file:	access:public
hid_struct::handle	hid_windows.c	/^	HANDLE handle;$/;"	m	language:C	struct:hid_struct	file:	access:public
hid_struct::iface	hid_linux.c	/^	int iface;$/;"	m	language:C	struct:hid_struct	file:	access:public
hid_struct::last_buffer	hid_macosx.c	/^	buffer_t *last_buffer;$/;"	m	language:C	struct:hid_struct	file:	access:public
hid_struct::next	hid_linux.c	/^	struct hid_struct *next;$/;"	m	language:C	struct:hid_struct	typeref:struct:hid_struct::hid_struct	file:	access:public
hid_struct::next	hid_macosx.c	/^	struct hid_struct *next;$/;"	m	language:C	struct:hid_struct	typeref:struct:hid_struct::hid_struct	file:	access:public
hid_struct::next	hid_windows.c	/^	struct hid_struct *next;$/;"	m	language:C	struct:hid_struct	typeref:struct:hid_struct::hid_struct	file:	access:public
hid_struct::open	hid_linux.c	/^	int open;$/;"	m	language:C	struct:hid_struct	file:	access:public
hid_struct::open	hid_macosx.c	/^	int open;$/;"	m	language:C	struct:hid_struct	file:	access:public
hid_struct::open	hid_windows.c	/^	int open;$/;"	m	language:C	struct:hid_struct	file:	access:public
hid_struct::prev	hid_linux.c	/^	struct hid_struct *prev;$/;"	m	language:C	struct:hid_struct	typeref:struct:hid_struct::hid_struct	file:	access:public
hid_struct::prev	hid_macosx.c	/^	struct hid_struct *prev;$/;"	m	language:C	struct:hid_struct	typeref:struct:hid_struct::hid_struct	file:	access:public
hid_struct::prev	hid_windows.c	/^	struct hid_struct *prev;$/;"	m	language:C	struct:hid_struct	typeref:struct:hid_struct::hid_struct	file:	access:public
hid_struct::ref	hid_macosx.c	/^	IOHIDDeviceRef ref;$/;"	m	language:C	struct:hid_struct	file:	access:public
hid_struct::usb	hid_linux.c	/^	usb_dev_handle *usb;$/;"	m	language:C	struct:hid_struct	file:	access:public
hid_t	hid.h	/^}hid_t;$/;"	t	language:C++	namespace:hid	typeref:struct:hid::hid_struct
hid_t	hid_linux.c	/^typedef struct hid_struct hid_t;$/;"	t	language:C	typeref:struct:hid_struct	file:
hid_t	hid_macosx.c	/^typedef struct hid_struct hid_t;$/;"	t	language:C	typeref:struct:hid_struct	file:
hid_t	hid_windows.c	/^typedef struct hid_struct hid_t;$/;"	t	language:C	typeref:struct:hid_struct	file:
hid_track_stop_	channels.h	/^  volatile bool hid_track_stop_;$/;"	m	language:C++	class:Channels	access:private
hid_track_thread_	channels.h	/^  std::thread hid_track_thread_;$/;"	m	language:C++	class:Channels	access:private
iface	hid.h	/^  int iface;$/;"	m	language:C++	struct:hid::hid_struct	access:public
iface	hid_linux.c	/^	int iface;$/;"	m	language:C	struct:hid_struct	file:	access:public
image_color_	camera_p.h	/^  std::vector<Image::pointer> image_color_;$/;"	m	language:C++	class:CameraPrivate	access:private
image_color_wait_	camera_p.h	/^  std::condition_variable image_color_wait_;$/;"	m	language:C++	class:CameraPrivate	access:private
image_depth_	camera_p.h	/^  std::vector<Image::pointer> image_depth_;$/;"	m	language:C++	class:CameraPrivate	access:private
image_depth_wait_	camera_p.h	/^  std::condition_variable image_depth_wait_;$/;"	m	language:C++	class:CameraPrivate	access:private
img_callback_	channels.h	/^  img_callback_t img_callback_;$/;"	m	language:C++	class:Channels	access:private
img_info_	camera_p.h	/^  img_info_datas_t img_info_;$/;"	m	language:C++	class:CameraPrivate	access:private
imu_callback_	channels.h	/^  imu_callback_t imu_callback_;$/;"	m	language:C++	class:Channels	access:private
imu_data_	camera_p.h	/^  motion_datas_t imu_data_;$/;"	m	language:C++	class:CameraPrivate	access:private
input_callback	hid_macosx.c	/^static void input_callback(void *, IOReturn, void *, IOHIDReportType,$/;"	p	language:C	file:	signature:(void *, IOReturn, void *, IOHIDReportType, uint32_t, uint8_t *, CFIndex)
input_callback	hid_macosx.c	/^static void input_callback(void *context, IOReturn ret, void *sender,$/;"	f	language:C	file:	signature:(void *context, IOReturn ret, void *sender, IOHIDReportType type, uint32_t id, uint8_t *data, CFIndex len)
is_capture_image_	camera_p.h	/^  bool is_capture_image_;$/;"	m	language:C++	class:CameraPrivate	access:private
is_hid_tracking_	channels.h	/^  bool is_hid_tracking_;$/;"	m	language:C++	class:Channels	access:private
is_imu_open_	camera_p.h	/^  bool is_imu_open_;$/;"	m	language:C++	class:CameraPrivate	access:private
is_opened_	hid.h	/^  bool is_opened_;$/;"	m	language:C++	class:hid::hid_device	access:private
is_start_	camera_p.h	/^  bool is_start_;$/;"	m	language:C++	class:CameraPrivate	access:private
last_buffer	hid_macosx.c	/^	buffer_t *last_buffer;$/;"	m	language:C	struct:hid_struct	file:	access:public
last_hid	hid_linux.c	/^static hid_t *last_hid = NULL;$/;"	v	language:C	file:
last_hid	hid_macosx.c	/^static hid_t *last_hid = NULL;$/;"	v	language:C	file:
last_hid	hid_windows.c	/^static hid_t *last_hid = NULL;$/;"	v	language:C	file:
last_hid_	hid.h	/^  hid_t *last_hid_;$/;"	m	language:C++	class:hid::hid_device	access:private
len	hid_macosx.c	/^	uint32_t len;$/;"	m	language:C	struct:buffer_struct	file:	access:public
mtx_img_info_	camera_p.h	/^  std::mutex mtx_img_info_;$/;"	m	language:C++	class:CameraPrivate	access:private
mtx_imgs_	camera_p.h	/^  std::mutex mtx_imgs_;$/;"	m	language:C++	class:CameraPrivate	access:private
mtx_imu_	camera_p.h	/^  std::mutex mtx_imu_;$/;"	m	language:C++	class:CameraPrivate	access:private
next	hid.h	/^  struct hid_struct *next;$/;"	m	language:C++	struct:hid::hid_struct	typeref:struct:hid::hid_struct::hid_struct	access:public
next	hid_linux.c	/^	struct hid_struct *next;$/;"	m	language:C	struct:hid_struct	typeref:struct:hid_struct::hid_struct	file:	access:public
next	hid_macosx.c	/^	struct buffer_struct *next;$/;"	m	language:C	struct:buffer_struct	typeref:struct:buffer_struct::buffer_struct	file:	access:public
next	hid_macosx.c	/^	struct hid_struct *next;$/;"	m	language:C	struct:hid_struct	typeref:struct:hid_struct::hid_struct	file:	access:public
next	hid_windows.c	/^	struct hid_struct *next;$/;"	m	language:C	struct:hid_struct	typeref:struct:hid_struct::hid_struct	file:	access:public
open	hid.h	/^  int open(int max, int vid, int pid, int usage_page, int usage);$/;"	p	language:C++	class:hid::hid_device	access:public	signature:(int max, int vid, int pid, int usage_page, int usage)
open	hid.h	/^  int open;$/;"	m	language:C++	struct:hid::hid_struct	access:public
open	hid_linux.c	/^	int open;$/;"	m	language:C	struct:hid_struct	file:	access:public
open	hid_linux.cc	/^int hid_device::open(int max, int vid, int pid, int usage_page, int usage) {$/;"	f	language:C++	class:hid::hid_device	signature:(int max, int vid, int pid, int usage_page, int usage)
open	hid_macosx.c	/^	int open;$/;"	m	language:C	struct:hid_struct	file:	access:public
open	hid_windows.c	/^	int open;$/;"	m	language:C	struct:hid_struct	file:	access:public
output_callback	hid_macosx.c	/^void output_callback(void *context, IOReturn ret, void *sender,$/;"	f	language:C	signature:(void *context, IOReturn ret, void *sender, IOHIDReportType type, uint32_t id, uint8_t *data, CFIndex len)
packets	types.h	/^  std::vector<ImgInfoPacket> packets;$/;"	m	language:C++	struct:ImgInfoResPacket	access:public
packets	types.h	/^  std::vector<ImuPacket> packets;$/;"	m	language:C++	struct:ImuResPacket	access:public
prev	hid.h	/^  struct hid_struct *prev;$/;"	m	language:C++	struct:hid::hid_struct	typeref:struct:hid::hid_struct::hid_struct	access:public
prev	hid_linux.c	/^	struct hid_struct *prev;$/;"	m	language:C	struct:hid_struct	typeref:struct:hid_struct::hid_struct	file:	access:public
prev	hid_macosx.c	/^	struct hid_struct *prev;$/;"	m	language:C	struct:hid_struct	typeref:struct:hid_struct::hid_struct	file:	access:public
prev	hid_windows.c	/^	struct hid_struct *prev;$/;"	m	language:C	struct:hid_struct	typeref:struct:hid_struct::hid_struct	file:	access:public
print_win32_err	hid_windows.c	/^void print_win32_err(void)$/;"	f	language:C	signature:(void)
print_win32_err	hid_windows.c	/^void print_win32_err(void);$/;"	p	language:C	file:	signature:(void)
process_usb_dev	hid.h	/^  void process_usb_dev(int max, $/;"	p	language:C++	class:hid::hid_device	access:protected	signature:(int max, usb_device_t *dev, usb_interface_t *iface, usb_dev_handle *handle, int &count, int &claimed, int usage, int usage_page)
process_usb_dev	hid_linux.cc	/^void hid_device::process_usb_dev(int max, $/;"	f	language:C++	class:hid::hid_device	signature:(int max, usb_device_t *dev, usb_interface_t *iface, usb_dev_handle *handle, int &count, int &claimed, int usage, int usage_page)
rate_	camera_p.h	/^  std::unique_ptr<Rate> rate_;$/;"	m	language:C++	class:CameraPrivate	access:private
rawhid_close	hid_linux.c	/^void rawhid_close(int num)$/;"	f	language:C	signature:(int num)
rawhid_close	hid_macosx.c	/^void rawhid_close(int num)$/;"	f	language:C	signature:(int num)
rawhid_close	hid_windows.c	/^void rawhid_close(int num)$/;"	f	language:C	signature:(int num)
rawhid_droped	hid_linux.c	/^void rawhid_droped(){$/;"	f	language:C
rawhid_open	hid_linux.c	/^int rawhid_open(int max, int vid, int pid, int usage_page, int usage)$/;"	f	language:C	signature:(int max, int vid, int pid, int usage_page, int usage)
rawhid_open	hid_macosx.c	/^int rawhid_open(int max, int vid, int pid, int usage_page, int usage)$/;"	f	language:C	signature:(int max, int vid, int pid, int usage_page, int usage)
rawhid_open	hid_windows.c	/^int rawhid_open(int max, int vid, int pid, int usage_page, int usage)$/;"	f	language:C	signature:(int max, int vid, int pid, int usage_page, int usage)
rawhid_recv	hid_linux.c	/^int rawhid_recv(int num, void *buf, int len, int timeout)$/;"	f	language:C	signature:(int num, void *buf, int len, int timeout)
rawhid_recv	hid_macosx.c	/^int rawhid_recv(int num, void *buf, int len, int timeout)$/;"	f	language:C	signature:(int num, void *buf, int len, int timeout)
rawhid_recv	hid_windows.c	/^int rawhid_recv(int num, void *buf, int len, int timeout)$/;"	f	language:C	signature:(int num, void *buf, int len, int timeout)
rawhid_send	hid_linux.c	/^int rawhid_send(int num, void *buf, int len, int timeout)$/;"	f	language:C	signature:(int num, void *buf, int len, int timeout)
rawhid_send	hid_macosx.c	/^int rawhid_send(int num, void *buf, int len, int timeout)$/;"	f	language:C	signature:(int num, void *buf, int len, int timeout)
rawhid_send	hid_windows.c	/^int rawhid_send(int num, void *buf, int len, int timeout)$/;"	f	language:C	signature:(int num, void *buf, int len, int timeout)
receive	hid.h	/^  int receive(int num, void* buf, int len, int timeout);$/;"	p	language:C++	class:hid::hid_device	access:public	signature:(int num, void* buf, int len, int timeout)
receive	hid_linux.cc	/^int hid_device::receive(int num, void *buf, int len, int timeout) {$/;"	f	language:C++	class:hid::hid_device	signature:(int num, void *buf, int len, int timeout)
ref	hid_macosx.c	/^	IOHIDDeviceRef ref;$/;"	m	language:C	struct:hid_struct	file:	access:public
rx_event	hid_windows.c	/^static HANDLE rx_event=NULL;$/;"	v	language:C	file:
rx_mutex	hid_windows.c	/^static CRITICAL_SECTION rx_mutex;$/;"	v	language:C	file:
segments	types.h	/^  std::vector<ImuSegment> segments;$/;"	m	language:C++	struct:ImuPacket	access:public
send	hid.h	/^  int send(int num, void* buf, int len, int timeout);$/;"	p	language:C++	class:hid::hid_device	access:public	signature:(int num, void* buf, int len, int timeout)
send	hid_linux.cc	/^int hid_device::send(int num, void *buf, int len, int timeout) {$/;"	f	language:C++	class:hid::hid_device	signature:(int num, void *buf, int len, int timeout)
stream_color_info_ptr_	camera_p.h	/^  PETRONDI_STREAM_INFO stream_color_info_ptr_;$/;"	m	language:C++	class:CameraPrivate	access:private
stream_depth_info_ptr_	camera_p.h	/^  PETRONDI_STREAM_INFO stream_depth_info_ptr_;$/;"	m	language:C++	class:CameraPrivate	access:private
stream_info_dev_index_	camera_p.h	/^  std::int32_t stream_info_dev_index_;$/;"	m	language:C++	class:CameraPrivate	access:private
sync_thread_	camera_p.h	/^  std::thread sync_thread_;$/;"	m	language:C++	class:CameraPrivate	access:private
temperature	types.h	/^  std::int16_t temperature;$/;"	m	language:C++	struct:ImuSegment	access:public
timeout_callback	hid_macosx.c	/^static void timeout_callback(CFRunLoopTimerRef timer, void *info)$/;"	f	language:C	file:	signature:(CFRunLoopTimerRef timer, void *info)
timeout_callback	hid_macosx.c	/^static void timeout_callback(CFRunLoopTimerRef, void *);$/;"	p	language:C	file:	signature:(CFRunLoopTimerRef, void *)
timestamp	types.h	/^  std::uint32_t timestamp;$/;"	m	language:C++	struct:ImgInfoPacket	access:public
timestamp	types.h	/^  std::uint32_t timestamp;$/;"	m	language:C++	struct:ImuSegment	access:public
tx_event	hid_windows.c	/^static HANDLE tx_event=NULL;$/;"	v	language:C	file:
tx_mutex	hid_windows.c	/^static CRITICAL_SECTION tx_mutex;$/;"	v	language:C	file:
usb	hid.h	/^  usb_dev_handle *usb;$/;"	m	language:C++	struct:hid::hid_struct	access:public
usb	hid_linux.c	/^	usb_dev_handle *usb;$/;"	m	language:C	struct:hid_struct	file:	access:public
~CameraPrivate	camera_p.cc	/^CameraPrivate::~CameraPrivate() {$/;"	f	language:C++	class:CameraPrivate	signature:()
~CameraPrivate	camera_p.h	/^  ~CameraPrivate();$/;"	p	language:C++	class:CameraPrivate	access:public	signature:()
~Channels	channels.cc	/^Channels::~Channels() {$/;"	f	language:C++	class:Channels	signature:()
~Channels	channels.h	/^  virtual ~Channels();$/;"	p	language:C++	class:Channels	access:public	signature:()
~Synthetic	synthetic.h	/^  ~Synthetic();$/;"	p	language:C++	class:Synthetic	access:public	signature:()
~hid_device	hid.h	/^  virtual ~hid_device();$/;"	p	language:C++	class:hid::hid_device	access:public	signature:()
~hid_device	hid_linux.cc	/^hid_device::~hid_device() {$/;"	f	language:C++	class:hid::hid_device	signature:()
